#SAM Template - defines the application
#AWS SAM is a model used to define serverless applications on AWS
AWSTemplateFormatVersion: '2010-09-09'
Transform:
- 'AWS::Serverless-2016-10-31'
- 'AWS::EvWorld'

Description:
  Creates a RESTful API using API Gateway, Lambda and DynamoDB for the ev world development team

Parameters:
  ProjectId:
    Type: String
    Description: AWS EV WORLD PROJECT
Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: Dev    

Resources:
     #Defining a role for lambda functions
    LambdaExecutionRole:
        Description: Creating service role in IAM for AWS Lambda
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                - Effect: Allow
                  Principal:
                    Service: [lambda.amazonaws.com]
                  Action: sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                -  arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

    #Defining the lambda function for testing
    CDDemoLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: lambdaFunction.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for CD Demo'
            MemorySize: 128
            Timeout: 30
            Role: !GetAtt LambdaExecutionRole.Arn
            Events:
                getAZsAPI:
                    Type: Api
                    Properties:
                        Path: /getazs
                        Method: get
            Environment:
                Variables:
                    REGION: ap-southeast-1
    
    #search model lambda function
    ModelSearchLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-model-search.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car model search'
            MemorySize: 128
            Timeout: 30
            Role: !GetAtt LambdaExecutionRole.Arn
            Events:
                scanCarModelAPI:
                    Type: Api
                    Properties:
                        Path: /car-model-search
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1
    
    #retrieve price lambda function
    PriceRetrievalLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-price-retrieval.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car price retrieve'
            MemorySize: 128
            Timeout: 30
            Role: !GetAtt LambdaExecutionRole.Arn
            Events:
                getCarPriceAPI:
                    Type: Api
                    Properties:
                        Path: /car-price
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1                

    #retrieve options lambda function
    OptionsRetrievalLambda:
        Type: AWS::Serverless::Function
        Properties:
            Handler: car-option-retrieval.lambda_handler
            Runtime: python3.8
            CodeUri: ./services
            Description: 'Lambda function for car options retrieve'
            MemorySize: 128
            Timeout: 30
            Role: !GetAtt LambdaExecutionRole.Arn
            Events:
                getCarOptionsAPI:
                    Type: Api
                    Properties:
                        Path: /car-options
                        Method: post
            Environment:
                Variables:
                    REGION: ap-southeast-1
